import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:intl/intl.dart';
import 'dart:async';

class TimerPage1 extends StatefulWidget {
  const TimerPage({Key? key}) : super(key: key);

  @override
  TimerPage1State createState() => TimerPageState();
}

class TimerPage1State extends State<TimerPage> {
  List<AlarmEntry> alarms = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.black,
        title: const Text(
          '타이머',
          style: TextStyle(
            fontSize: 30,
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
          color: Colors.black,
        ),
        child: Padding(
          padding: const EdgeInsets.all(1.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              ElevatedButton(
                onPressed: () async {
                  final pickedTime = await showTimePicker(
                    context: context,
                    initialTime: TimeOfDay.now(),
                  );
                  if (pickedTime != null) {
                    setState(() {
                      alarms.add(
                        AlarmEntry(
                          time: DateTime(
                            DateTime.now().year,
                            DateTime.now().month,
                            DateTime.now().day,
                            pickedTime.hour,
                            pickedTime.minute,
                          ),
                          isEnabled: false,
                        ),
                      );
                    });
                  }
                },
                style: ElevatedButton.styleFrom(
                  textStyle: TextStyle(
                    color: Colors.white,
                    fontSize: 20,
                  ),
                ),
                child: const Text('타이머 추가'),
              ),
              const SizedBox(height: 20),
              Expanded(
                child: ListView.separated(
                  itemCount: alarms.length,
                  separatorBuilder: (BuildContext context, int index) =>
                      Divider(
                        color: Colors.white,
                        thickness: 0.5,
                      ),
                  itemBuilder: (BuildContext context, int index) {
                    return ListTile(
                      title: Text(
                        DateFormat('hh:mm').format(alarms[index].time),
                        style: const TextStyle(
                          fontSize: 20,
                          color: Colors.white,
                        ),
                      ),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Switch(
                            value: alarms[index].isEnabled,
                            onChanged: (value) {
                              setState(() {
                                alarms[index].isEnabled = value;
                                if (value) {
                                  startTimerForAlarm(index);
                                } else {
                                  stopTimerForAlarm(index);
                                }
                              });
                            },
                          ),
                          IconButton(
                            icon: Icon(Icons.deblur_outlined),
                            onPressed: () {
                              deleteAlarm(index);
                            },
                          ),
                        ],
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void deleteAlarm(int index) {
    setState(() {
      alarms.removeAt(index);
    });
  }

  void startTimerForAlarm(int index) {
    setState(() {
      alarms[index].isEnabled = true;
      alarms[index].startTimer(() {
        setState(() {});
      });
    });
  }

  void stopTimerForAlarm(int index) {
    setState(() {
      alarms[index].isEnabled = false;
      alarms[index].stopTimer();
    });
  }
}

class AlarmEntry {
  late Timer _timer;
  bool isEnabled = false;
  late DateTime time;
  late Function() setState;

  void startTimer(Function() stateSet) {
    setState = stateSet;
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      if (isEnabled) {
        time = time.subtract(Duration(seconds: 1));
        setState();
      }
    });
  }

  AlarmEntry({
    required DateTime time,
    required bool isEnabled,
  }) {
    this.time = time;
    this.isEnabled = isEnabled;
  }

  void stopTimer() {
    _timer.cancel();
  }
}
